main:

mgo "gopkg.in/mgo.v2"

var (
	pConn      *sql.DB
	conn       *sql.DB
	mongoConn  *mgo.Session
	userDB     = os.Getenv("SUPPORT_USER_DB")
	passwordDB = os.Getenv("SUPPORT_PASSWORD_DB")

	mongoDBDialInfo = &mgo.DialInfo{
		Addrs:    []string{os.Getenv("SUPPORT_MONGO_DB")},
		Timeout:  20 * time.Second,
		Database: os.Getenv("SUPPORT_MONGO_NAME"),
		Username: os.Getenv("SUPPORT_MONGO_USER"),
		Password: os.Getenv("SUPPORT_MONGO_PASSWORD"),
	}
)

func init() {
	mongoSyDb, err := mgo.DialWithInfo(mongoDBDialInfo)
	if err != nil {
		panic(err)
	}
	mongoConn = mongoSyDb
}
main:

	// Starts mongo repository.
	mongoRepo := repository.NewMongoRepository(mongoConn)


internal/repository:

	MongoRepository interface {
		SaveNewCalendarRequest(data model.CalendarReq) error
		NewTaskComment(comment model.TaskComments) error
		NewTaskDescription(task model.TaskDescription) error
		GetTaskDescription(taskID int) (model.TaskDescription, error)
	}
	
implementação da interface:


package repository

import (
	"gitlab.involvesapp.com/suporte/task-sync/model"
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

const (
	mongoName      = "yoda"
	taskCollection = "KanbanizeTaskDescription"
	taskComment    = "KanbanizeTaskComment"
)

type mongoRepositoryImp struct {
	s *mgo.Session
}

func NewMongoRepository(s *mgo.Session) MongoRepository {
	return &mongoRepositoryImp{
		s: s,
	}
}

func (m *mongoRepositoryImp) SaveNewCalendarRequest(data model.CalendarReq) error {
	conn := m.s.Copy()
	defer conn.Close()

	if err := conn.DB(mongoName).C("HolidaysSchedule").Insert(data); err != nil {
		return err
	}
	return nil
}

func (m *mongoRepositoryImp) GetTaskDescription(taskID int) (model.TaskDescription, error) {
	conn := m.s.Copy()
	defer conn.Close()
	query := bson.M{
		"taskid": taskID,
	}

	task := model.TaskDescription{}
	if err := conn.DB(mongoName).C(taskCollection).Find(query).One(&task); err != nil {
		return model.TaskDescription{}, err
	}
	return task, nil
}

func (m *mongoRepositoryImp) NewTaskDescription(task model.TaskDescription) error {
	conn := m.s.Copy()
	defer conn.Close()
	return conn.DB(mongoName).C(taskCollection).Insert(task)
}

func (m *mongoRepositoryImp) NewTaskComment(comment model.TaskComments) error {
	conn := m.s.Copy()
	defer conn.Close()
	return conn.DB(mongoName).C(taskComment).Insert(comment)
}

	
	